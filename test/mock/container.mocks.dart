// Mocks generated by Mockito 5.3.2 from annotations
// in picbook/test/mock/container.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:logger/logger.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:picbook/domain/entity/book.dart' as _i13;
import 'package:picbook/domain/entity/bookshelf.dart' as _i4;
import 'package:picbook/domain/entity/bookshelf_history.dart' as _i16;
import 'package:picbook/domain/entity/user.dart' as _i2;
import 'package:picbook/infrastructure/analytics_service.dart' as _i7;
import 'package:picbook/infrastructure/auth_repository.dart' as _i10;
import 'package:picbook/infrastructure/books_repository.dart' as _i12;
import 'package:picbook/infrastructure/bookshelf_history_repository.dart'
    as _i15;
import 'package:picbook/infrastructure/bookshelf_repository.dart' as _i11;
import 'package:picbook/infrastructure/rakuten_book_repository.dart' as _i14;
import 'package:picbook/infrastructure/user_repository.dart' as _i9;
import 'package:picbook/state/search_book_state.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_1 extends _i1.SmartFake implements _i3.FirebaseAuth {
  _FakeFirebaseAuth_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBookshelf_2 extends _i1.SmartFake implements _i4.Bookshelf {
  _FakeBookshelf_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchBookState_3 extends _i1.SmartFake
    implements _i5.SearchBookState {
  _FakeSearchBookState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i6.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void v(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #v,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void d(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #d,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void i(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #i,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void w(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #w,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void e(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #e,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void wtf(
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #wtf,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void log(
    _i6.Level? level,
    dynamic message, [
    dynamic error,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #log,
          [
            level,
            message,
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i7.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> sendButtonEvent({required String? buttonName}) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendButtonEvent,
          [],
          {#buttonName: buttonName},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i9.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i2.User> findById({required String? id}) => (super.noSuchMethod(
        Invocation.method(
          #findById,
          [],
          {#id: id},
        ),
        returnValue: _i8.Future<_i2.User>.value(_FakeUser_0(
          this,
          Invocation.method(
            #findById,
            [],
            {#id: id},
          ),
        )),
      ) as _i8.Future<_i2.User>);
  @override
  _i8.Future<void> create({required _i2.User? user}) => (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {#user: user},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> update({required _i2.User? user}) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [],
          {#user: user},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> delete({required _i2.User? user}) => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#user: user},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i10.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_1(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i3.FirebaseAuth);
  @override
  _i8.Stream<_i3.User?> get authStateChange => (super.noSuchMethod(
        Invocation.getter(#authStateChange),
        returnValue: _i8.Stream<_i3.User?>.empty(),
      ) as _i8.Stream<_i3.User?>);
  @override
  _i8.Future<void> logIn({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logIn,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> signUp({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signUp,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> logOut() => (super.noSuchMethod(
        Invocation.method(
          #logOut,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteUser({required String? password}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
          {#password: password},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> reAuth({required String? password}) => (super.noSuchMethod(
        Invocation.method(
          #reAuth,
          [],
          {#password: password},
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  String convertAuthError(String? errorCode) => (super.noSuchMethod(
        Invocation.method(
          #convertAuthError,
          [errorCode],
        ),
        returnValue: '',
      ) as String);
}

/// A class which mocks [BookshelfRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookshelfRepository extends _i1.Mock
    implements _i11.BookshelfRepository {
  MockBookshelfRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<_i4.Bookshelf> findById({
    required String? uid,
    required String? id,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #findById,
          [],
          {
            #uid: uid,
            #id: id,
          },
        ),
        returnValue: _i8.Future<_i4.Bookshelf>.value(_FakeBookshelf_2(
          this,
          Invocation.method(
            #findById,
            [],
            {
              #uid: uid,
              #id: id,
            },
          ),
        )),
      ) as _i8.Future<_i4.Bookshelf>);
  @override
  _i8.Future<List<_i4.Bookshelf>> fetchAll({required String? uid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
          {#uid: uid},
        ),
        returnValue: _i8.Future<List<_i4.Bookshelf>>.value(<_i4.Bookshelf>[]),
      ) as _i8.Future<List<_i4.Bookshelf>>);
  @override
  _i8.Future<void> create({
    required String? uid,
    required _i4.Bookshelf? bookshelf,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #uid: uid,
            #bookshelf: bookshelf,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [BooksRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBooksRepository extends _i1.Mock implements _i12.BooksRepository {
  MockBooksRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<List<_i13.Book>> fetchAll({
    required String? uid,
    required String? bookshelfId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAll,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
          },
        ),
        returnValue: _i8.Future<List<_i13.Book>>.value(<_i13.Book>[]),
      ) as _i8.Future<List<_i13.Book>>);
  @override
  _i8.Future<List<_i13.Book>> fetchAllOrderByRegisteredDateTime({
    required String? uid,
    required String? bookshelfId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllOrderByRegisteredDateTime,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
          },
        ),
        returnValue: _i8.Future<List<_i13.Book>>.value(<_i13.Book>[]),
      ) as _i8.Future<List<_i13.Book>>);
  @override
  _i8.Future<void> create({
    required String? uid,
    required String? bookshelfId,
    required _i13.Book? book,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
            #book: book,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> delete({
    required String? uid,
    required String? bookshelfId,
    required _i13.Book? book,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
            #book: book,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}

/// A class which mocks [RakutenBookRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRakutenBookRepository extends _i1.Mock
    implements _i14.RakutenBookRepository {
  MockRakutenBookRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i5.SearchBookState> search({
    required _i14.SearchType? searchType,
    required String? keyWord,
    List<_i13.Book>? addBooks = const [],
    int? getPage = 1,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [],
          {
            #searchType: searchType,
            #keyWord: keyWord,
            #addBooks: addBooks,
            #getPage: getPage,
          },
        ),
        returnValue:
            _i8.Future<_i5.SearchBookState>.value(_FakeSearchBookState_3(
          this,
          Invocation.method(
            #search,
            [],
            {
              #searchType: searchType,
              #keyWord: keyWord,
              #addBooks: addBooks,
              #getPage: getPage,
            },
          ),
        )),
      ) as _i8.Future<_i5.SearchBookState>);
}

/// A class which mocks [BookshelfHistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockBookshelfHistoryRepository extends _i1.Mock
    implements _i15.BookshelfHistoryRepository {
  MockBookshelfHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init() => super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<List<_i16.BookshelfHistory>> fetchAllOrderByDate({
    required String? uid,
    required String? bookshelfId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllOrderByDate,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
          },
        ),
        returnValue: _i8.Future<List<_i16.BookshelfHistory>>.value(
            <_i16.BookshelfHistory>[]),
      ) as _i8.Future<List<_i16.BookshelfHistory>>);
  @override
  _i8.Future<void> create({
    required String? uid,
    required String? bookshelfId,
    required _i16.BookshelfHistory? bookshelfHistory,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #uid: uid,
            #bookshelfId: bookshelfId,
            #bookshelfHistory: bookshelfHistory,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
